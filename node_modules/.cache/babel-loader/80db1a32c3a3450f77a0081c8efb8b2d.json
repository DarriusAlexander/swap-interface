{"ast":null,"code":"import _defineProperty from\"C:\\\\Users\\\\Darrius\\\\Documents\\\\GitHub\\\\swap-interface\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";var _process$env$REACT_AP;import{Web3Provider}from'@ethersproject/providers';import{InjectedConnector}from'@web3-react/injected-connector';import{WalletConnectConnector}from'@web3-react/walletconnect-connector';import{WalletLinkConnector}from'@web3-react/walletlink-connector';import{PortisConnector}from'@web3-react/portis-connector';import{FortmaticConnector}from'./Fortmatic';import{NetworkConnector}from'./NetworkConnector';import UNISWAP_LOGO_URL from\"../assets/svg/logo.svg\";var NETWORK_URL=process.env.REACT_APP_NETWORK_URL;var FORMATIC_KEY=process.env.REACT_APP_FORTMATIC_KEY;var PORTIS_ID=process.env.REACT_APP_PORTIS_ID;var WALLETCONNECT_BRIDGE_URL=process.env.REACT_APP_WALLETCONNECT_BRIDGE_URL;export var NETWORK_CHAIN_ID=parseInt((_process$env$REACT_AP=process.env.REACT_APP_CHAIN_ID)!==null&&_process$env$REACT_AP!==void 0?_process$env$REACT_AP:'1');if(typeof NETWORK_URL==='undefined'){throw new Error(\"REACT_APP_NETWORK_URL must be a defined environment variable\");}export var network=new NetworkConnector({urls:_defineProperty({},NETWORK_CHAIN_ID,NETWORK_URL)});var networkLibrary;export function getNetworkLibrary(){var _networkLibrary;return networkLibrary=(_networkLibrary=networkLibrary)!==null&&_networkLibrary!==void 0?_networkLibrary:new Web3Provider(network.provider);}export var injected=new InjectedConnector({supportedChainIds:[1,3,4,5,42]});// mainnet only\nexport var walletconnect=new WalletConnectConnector({rpc:{1:NETWORK_URL},bridge:WALLETCONNECT_BRIDGE_URL,qrcode:true,pollingInterval:15000});// mainnet only\nexport var fortmatic=new FortmaticConnector({apiKey:FORMATIC_KEY!==null&&FORMATIC_KEY!==void 0?FORMATIC_KEY:'',chainId:1});// mainnet only\nexport var portis=new PortisConnector({dAppId:PORTIS_ID!==null&&PORTIS_ID!==void 0?PORTIS_ID:'',networks:[1]});// mainnet only\nexport var walletlink=new WalletLinkConnector({url:NETWORK_URL,appName:'Uniswap',appLogoUrl:UNISWAP_LOGO_URL});","map":{"version":3,"sources":["C:/Users/Darrius/Documents/GitHub/swap-interface/src/connectors/index.ts"],"names":["Web3Provider","InjectedConnector","WalletConnectConnector","WalletLinkConnector","PortisConnector","FortmaticConnector","NetworkConnector","NETWORK_URL","process","env","REACT_APP_NETWORK_URL","FORMATIC_KEY","REACT_APP_FORTMATIC_KEY","PORTIS_ID","REACT_APP_PORTIS_ID","WALLETCONNECT_BRIDGE_URL","REACT_APP_WALLETCONNECT_BRIDGE_URL","NETWORK_CHAIN_ID","parseInt","REACT_APP_CHAIN_ID","Error","network","urls","networkLibrary","getNetworkLibrary","provider","injected","supportedChainIds","walletconnect","rpc","bridge","qrcode","pollingInterval","fortmatic","apiKey","chainId","portis","dAppId","networks","walletlink","url","appName","appLogoUrl","UNISWAP_LOGO_URL"],"mappings":"6MAAA,OAASA,YAAT,KAA6B,0BAA7B,CACA,OAASC,iBAAT,KAAkC,gCAAlC,CACA,OAASC,sBAAT,KAAuC,qCAAvC,CACA,OAASC,mBAAT,KAAoC,kCAApC,CACA,OAASC,eAAT,KAAgC,8BAAhC,CAEA,OAASC,kBAAT,KAAmC,aAAnC,CACA,OAASC,gBAAT,KAAiC,oBAAjC,C,qDAGA,GAAMC,CAAAA,WAAW,CAAGC,OAAO,CAACC,GAAR,CAAYC,qBAAhC,CACA,GAAMC,CAAAA,YAAY,CAAGH,OAAO,CAACC,GAAR,CAAYG,uBAAjC,CACA,GAAMC,CAAAA,SAAS,CAAGL,OAAO,CAACC,GAAR,CAAYK,mBAA9B,CACA,GAAMC,CAAAA,wBAAwB,CAAGP,OAAO,CAACC,GAAR,CAAYO,kCAA7C,CAEA,MAAO,IAAMC,CAAAA,gBAAwB,CAAGC,QAAQ,wBAACV,OAAO,CAACC,GAAR,CAAYU,kBAAb,+DAAmC,GAAnC,CAAzC,CAEP,GAAI,MAAOZ,CAAAA,WAAP,GAAuB,WAA3B,CAAwC,CACtC,KAAM,IAAIa,CAAAA,KAAJ,gEAAN,CACD,CAED,MAAO,IAAMC,CAAAA,OAAO,CAAG,GAAIf,CAAAA,gBAAJ,CAAqB,CAC1CgB,IAAI,oBAAKL,gBAAL,CAAwBV,WAAxB,CADsC,CAArB,CAAhB,CAIP,GAAIgB,CAAAA,cAAJ,CACA,MAAO,SAASC,CAAAA,iBAAT,EAA2C,qBAChD,MAAQD,CAAAA,cAAc,kBAAGA,cAAH,mDAAqB,GAAIvB,CAAAA,YAAJ,CAAiBqB,OAAO,CAACI,QAAzB,CAA3C,CACD,CAED,MAAO,IAAMC,CAAAA,QAAQ,CAAG,GAAIzB,CAAAA,iBAAJ,CAAsB,CAC5C0B,iBAAiB,CAAE,CAAC,CAAD,CAAI,CAAJ,CAAO,CAAP,CAAU,CAAV,CAAa,EAAb,CADyB,CAAtB,CAAjB,CAIP;AACA,MAAO,IAAMC,CAAAA,aAAa,CAAG,GAAI1B,CAAAA,sBAAJ,CAA2B,CACtD2B,GAAG,CAAE,CAAE,EAAGtB,WAAL,CADiD,CAEtDuB,MAAM,CAAEf,wBAF8C,CAGtDgB,MAAM,CAAE,IAH8C,CAItDC,eAAe,CAAE,KAJqC,CAA3B,CAAtB,CAOP;AACA,MAAO,IAAMC,CAAAA,SAAS,CAAG,GAAI5B,CAAAA,kBAAJ,CAAuB,CAC9C6B,MAAM,CAAEvB,YAAF,SAAEA,YAAF,UAAEA,YAAF,CAAkB,EADsB,CAE9CwB,OAAO,CAAE,CAFqC,CAAvB,CAAlB,CAKP;AACA,MAAO,IAAMC,CAAAA,MAAM,CAAG,GAAIhC,CAAAA,eAAJ,CAAoB,CACxCiC,MAAM,CAAExB,SAAF,SAAEA,SAAF,UAAEA,SAAF,CAAe,EADmB,CAExCyB,QAAQ,CAAE,CAAC,CAAD,CAF8B,CAApB,CAAf,CAKP;AACA,MAAO,IAAMC,CAAAA,UAAU,CAAG,GAAIpC,CAAAA,mBAAJ,CAAwB,CAChDqC,GAAG,CAAEjC,WAD2C,CAEhDkC,OAAO,CAAE,SAFuC,CAGhDC,UAAU,CAAEC,gBAHoC,CAAxB,CAAnB","sourcesContent":["import { Web3Provider } from '@ethersproject/providers'\r\nimport { InjectedConnector } from '@web3-react/injected-connector'\r\nimport { WalletConnectConnector } from '@web3-react/walletconnect-connector'\r\nimport { WalletLinkConnector } from '@web3-react/walletlink-connector'\r\nimport { PortisConnector } from '@web3-react/portis-connector'\r\n\r\nimport { FortmaticConnector } from './Fortmatic'\r\nimport { NetworkConnector } from './NetworkConnector'\r\nimport UNISWAP_LOGO_URL from '../assets/svg/logo.svg'\r\n\r\nconst NETWORK_URL = process.env.REACT_APP_NETWORK_URL\r\nconst FORMATIC_KEY = process.env.REACT_APP_FORTMATIC_KEY\r\nconst PORTIS_ID = process.env.REACT_APP_PORTIS_ID\r\nconst WALLETCONNECT_BRIDGE_URL = process.env.REACT_APP_WALLETCONNECT_BRIDGE_URL\r\n\r\nexport const NETWORK_CHAIN_ID: number = parseInt(process.env.REACT_APP_CHAIN_ID ?? '1')\r\n\r\nif (typeof NETWORK_URL === 'undefined') {\r\n  throw new Error(`REACT_APP_NETWORK_URL must be a defined environment variable`)\r\n}\r\n\r\nexport const network = new NetworkConnector({\r\n  urls: { [NETWORK_CHAIN_ID]: NETWORK_URL }\r\n})\r\n\r\nlet networkLibrary: Web3Provider | undefined\r\nexport function getNetworkLibrary(): Web3Provider {\r\n  return (networkLibrary = networkLibrary ?? new Web3Provider(network.provider as any))\r\n}\r\n\r\nexport const injected = new InjectedConnector({\r\n  supportedChainIds: [1, 3, 4, 5, 42]\r\n})\r\n\r\n// mainnet only\r\nexport const walletconnect = new WalletConnectConnector({\r\n  rpc: { 1: NETWORK_URL },\r\n  bridge: WALLETCONNECT_BRIDGE_URL,\r\n  qrcode: true,\r\n  pollingInterval: 15000\r\n})\r\n\r\n// mainnet only\r\nexport const fortmatic = new FortmaticConnector({\r\n  apiKey: FORMATIC_KEY ?? '',\r\n  chainId: 1\r\n})\r\n\r\n// mainnet only\r\nexport const portis = new PortisConnector({\r\n  dAppId: PORTIS_ID ?? '',\r\n  networks: [1]\r\n})\r\n\r\n// mainnet only\r\nexport const walletlink = new WalletLinkConnector({\r\n  url: NETWORK_URL,\r\n  appName: 'Uniswap',\r\n  appLogoUrl: UNISWAP_LOGO_URL\r\n})\r\n"]},"metadata":{},"sourceType":"module"}