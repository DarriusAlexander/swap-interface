{"ast":null,"code":"import _slicedToArray from\"C:\\\\Users\\\\Darrius\\\\Documents\\\\GitHub\\\\swap-interface\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import React,{useEffect,useMemo,useState}from'react';import{STAKING_GENESIS,REWARDS_DURATION_DAYS}from'../../state/stake/hooks';import{TYPE}from'../../theme';var MINUTE=60;var HOUR=MINUTE*60;var DAY=HOUR*24;var REWARDS_DURATION=DAY*REWARDS_DURATION_DAYS;export function Countdown(_ref){var exactEnd=_ref.exactEnd;// get end/beginning times\nvar end=useMemo(function(){return exactEnd?Math.floor(exactEnd.getTime()/1000):STAKING_GENESIS+REWARDS_DURATION;},[exactEnd]);var begin=useMemo(function(){return end-REWARDS_DURATION;},[end]);// get current time\nvar _useState=useState(function(){return Math.floor(Date.now()/1000);}),_useState2=_slicedToArray(_useState,2),time=_useState2[0],setTime=_useState2[1];useEffect(function(){// we only need to tick if rewards haven't ended yet\nif(time<=end){var timeout=setTimeout(function(){return setTime(Math.floor(Date.now()/1000));},1000);return function(){clearTimeout(timeout);};}},[time,end]);var timeUntilGenesis=begin-time;var timeUntilEnd=end-time;var timeRemaining;var message;if(timeUntilGenesis>=0){message='Rewards begin in';timeRemaining=timeUntilGenesis;}else{var ongoing=timeUntilEnd>=0;if(ongoing){message='Rewards end in';timeRemaining=timeUntilEnd;}else{message='Rewards have ended!';timeRemaining=Infinity;}}var days=(timeRemaining-timeRemaining%DAY)/DAY;timeRemaining-=days*DAY;var hours=(timeRemaining-timeRemaining%HOUR)/HOUR;timeRemaining-=hours*HOUR;var minutes=(timeRemaining-timeRemaining%MINUTE)/MINUTE;timeRemaining-=minutes*MINUTE;var seconds=timeRemaining;return/*#__PURE__*/React.createElement(TYPE.black,{fontWeight:400},message,' ',Number.isFinite(timeRemaining)&&/*#__PURE__*/React.createElement(\"code\",null,\"\".concat(days,\":\").concat(hours.toString().padStart(2,'0'),\":\").concat(minutes.toString().padStart(2,'0'),\":\").concat(seconds.toString().padStart(2,'0'))));}","map":{"version":3,"sources":["C:/Users/Darrius/Documents/GitHub/swap-interface/src/pages/Earn/Countdown.tsx"],"names":["React","useEffect","useMemo","useState","STAKING_GENESIS","REWARDS_DURATION_DAYS","TYPE","MINUTE","HOUR","DAY","REWARDS_DURATION","Countdown","exactEnd","end","Math","floor","getTime","begin","Date","now","time","setTime","timeout","setTimeout","clearTimeout","timeUntilGenesis","timeUntilEnd","timeRemaining","message","ongoing","Infinity","days","hours","minutes","seconds","Number","isFinite","toString","padStart"],"mappings":"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","sourcesContent":["import React, { useEffect, useMemo, useState } from 'react'\r\nimport { STAKING_GENESIS, REWARDS_DURATION_DAYS } from '../../state/stake/hooks'\r\nimport { TYPE } from '../../theme'\r\n\r\nconst MINUTE = 60\r\nconst HOUR = MINUTE * 60\r\nconst DAY = HOUR * 24\r\nconst REWARDS_DURATION = DAY * REWARDS_DURATION_DAYS\r\n\r\nexport function Countdown({ exactEnd }: { exactEnd?: Date }) {\r\n  // get end/beginning times\r\n  const end = useMemo(() => (exactEnd ? Math.floor(exactEnd.getTime() / 1000) : STAKING_GENESIS + REWARDS_DURATION), [\r\n    exactEnd\r\n  ])\r\n  const begin = useMemo(() => end - REWARDS_DURATION, [end])\r\n\r\n  // get current time\r\n  const [time, setTime] = useState(() => Math.floor(Date.now() / 1000))\r\n  useEffect((): (() => void) | void => {\r\n    // we only need to tick if rewards haven't ended yet\r\n    if (time <= end) {\r\n      const timeout = setTimeout(() => setTime(Math.floor(Date.now() / 1000)), 1000)\r\n      return () => {\r\n        clearTimeout(timeout)\r\n      }\r\n    }\r\n  }, [time, end])\r\n\r\n  const timeUntilGenesis = begin - time\r\n  const timeUntilEnd = end - time\r\n\r\n  let timeRemaining: number\r\n  let message: string\r\n  if (timeUntilGenesis >= 0) {\r\n    message = 'Rewards begin in'\r\n    timeRemaining = timeUntilGenesis\r\n  } else {\r\n    const ongoing = timeUntilEnd >= 0\r\n    if (ongoing) {\r\n      message = 'Rewards end in'\r\n      timeRemaining = timeUntilEnd\r\n    } else {\r\n      message = 'Rewards have ended!'\r\n      timeRemaining = Infinity\r\n    }\r\n  }\r\n\r\n  const days = (timeRemaining - (timeRemaining % DAY)) / DAY\r\n  timeRemaining -= days * DAY\r\n  const hours = (timeRemaining - (timeRemaining % HOUR)) / HOUR\r\n  timeRemaining -= hours * HOUR\r\n  const minutes = (timeRemaining - (timeRemaining % MINUTE)) / MINUTE\r\n  timeRemaining -= minutes * MINUTE\r\n  const seconds = timeRemaining\r\n\r\n  return (\r\n    <TYPE.black fontWeight={400}>\r\n      {message}{' '}\r\n      {Number.isFinite(timeRemaining) && (\r\n        <code>\r\n          {`${days}:${hours.toString().padStart(2, '0')}:${minutes\r\n            .toString()\r\n            .padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`}\r\n        </code>\r\n      )}\r\n    </TYPE.black>\r\n  )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}