{"ast":null,"code":"import _regeneratorRuntime from\"C:\\\\Users\\\\Darrius\\\\Documents\\\\GitHub\\\\swap-interface\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";import _asyncToGenerator from\"C:\\\\Users\\\\Darrius\\\\Documents\\\\GitHub\\\\swap-interface\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";import{nanoid}from'@reduxjs/toolkit';import{ChainId}from'@uniswap/sdk';import{useCallback}from'react';import{useDispatch}from'react-redux';import{getNetworkLibrary,NETWORK_CHAIN_ID}from'../connectors';import{fetchTokenList}from'../state/lists/actions';import getTokenList from'../utils/getTokenList';import resolveENSContentHash from'../utils/resolveENSContentHash';import{useActiveWeb3React}from'./index';export function useFetchListCallback(){var _useActiveWeb3React=useActiveWeb3React(),chainId=_useActiveWeb3React.chainId,library=_useActiveWeb3React.library;var dispatch=useDispatch();var ensResolver=useCallback(function(ensName){if(!library||chainId!==ChainId.MAINNET){if(NETWORK_CHAIN_ID===ChainId.MAINNET){var networkLibrary=getNetworkLibrary();if(networkLibrary){return resolveENSContentHash(ensName,networkLibrary);}}throw new Error('Could not construct mainnet ENS resolver');}return resolveENSContentHash(ensName,library);},[chainId,library]);// note: prevent dispatch if using for list search or unsupported list\nreturn useCallback(/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(listUrl){var sendDispatch,requestId,_args=arguments;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:sendDispatch=_args.length>1&&_args[1]!==undefined?_args[1]:true;requestId=nanoid();sendDispatch&&dispatch(fetchTokenList.pending({requestId:requestId,url:listUrl}));return _context.abrupt(\"return\",getTokenList(listUrl,ensResolver).then(function(tokenList){sendDispatch&&dispatch(fetchTokenList.fulfilled({url:listUrl,tokenList:tokenList,requestId:requestId}));return tokenList;}).catch(function(error){console.debug(\"Failed to get list at url \".concat(listUrl),error);sendDispatch&&dispatch(fetchTokenList.rejected({url:listUrl,requestId:requestId,errorMessage:error.message}));throw error;}));case 4:case\"end\":return _context.stop();}}},_callee);}));return function(_x){return _ref.apply(this,arguments);};}(),[dispatch,ensResolver]);}","map":{"version":3,"sources":["C:/Users/Darrius/Documents/GitHub/swap-interface/src/hooks/useFetchListCallback.ts"],"names":["nanoid","ChainId","useCallback","useDispatch","getNetworkLibrary","NETWORK_CHAIN_ID","fetchTokenList","getTokenList","resolveENSContentHash","useActiveWeb3React","useFetchListCallback","chainId","library","dispatch","ensResolver","ensName","MAINNET","networkLibrary","Error","listUrl","sendDispatch","requestId","pending","url","then","tokenList","fulfilled","catch","error","console","debug","rejected","errorMessage","message"],"mappings":"+VAAA,OAASA,MAAT,KAAuB,kBAAvB,CACA,OAASC,OAAT,KAAwB,cAAxB,CAEA,OAASC,WAAT,KAA4B,OAA5B,CACA,OAASC,WAAT,KAA4B,aAA5B,CACA,OAASC,iBAAT,CAA4BC,gBAA5B,KAAoD,eAApD,CAEA,OAASC,cAAT,KAA+B,wBAA/B,CACA,MAAOC,CAAAA,YAAP,KAAyB,uBAAzB,CACA,MAAOC,CAAAA,qBAAP,KAAkC,gCAAlC,CACA,OAASC,kBAAT,KAAmC,SAAnC,CAEA,MAAO,SAASC,CAAAA,oBAAT,EAAiG,yBACzED,kBAAkB,EADuD,CAC9FE,OAD8F,qBAC9FA,OAD8F,CACrFC,OADqF,qBACrFA,OADqF,CAEtG,GAAMC,CAAAA,QAAQ,CAAGV,WAAW,EAA5B,CAEA,GAAMW,CAAAA,WAAW,CAAGZ,WAAW,CAC7B,SAACa,OAAD,CAAqB,CACnB,GAAI,CAACH,OAAD,EAAYD,OAAO,GAAKV,OAAO,CAACe,OAApC,CAA6C,CAC3C,GAAIX,gBAAgB,GAAKJ,OAAO,CAACe,OAAjC,CAA0C,CACxC,GAAMC,CAAAA,cAAc,CAAGb,iBAAiB,EAAxC,CACA,GAAIa,cAAJ,CAAoB,CAClB,MAAOT,CAAAA,qBAAqB,CAACO,OAAD,CAAUE,cAAV,CAA5B,CACD,CACF,CACD,KAAM,IAAIC,CAAAA,KAAJ,CAAU,0CAAV,CAAN,CACD,CACD,MAAOV,CAAAA,qBAAqB,CAACO,OAAD,CAAUH,OAAV,CAA5B,CACD,CAZ4B,CAa7B,CAACD,OAAD,CAAUC,OAAV,CAb6B,CAA/B,CAgBA;AACA,MAAOV,CAAAA,WAAW,0FAChB,iBAAOiB,OAAP,6JAAwBC,YAAxB,+CAAuC,IAAvC,CACQC,SADR,CACoBrB,MAAM,EAD1B,CAEEoB,YAAY,EAAIP,QAAQ,CAACP,cAAc,CAACgB,OAAf,CAAuB,CAAED,SAAS,CAATA,SAAF,CAAaE,GAAG,CAAEJ,OAAlB,CAAvB,CAAD,CAAxB,CAFF,gCAGSZ,YAAY,CAACY,OAAD,CAAUL,WAAV,CAAZ,CACJU,IADI,CACC,SAAAC,SAAS,CAAI,CACjBL,YAAY,EAAIP,QAAQ,CAACP,cAAc,CAACoB,SAAf,CAAyB,CAAEH,GAAG,CAAEJ,OAAP,CAAgBM,SAAS,CAATA,SAAhB,CAA2BJ,SAAS,CAATA,SAA3B,CAAzB,CAAD,CAAxB,CACA,MAAOI,CAAAA,SAAP,CACD,CAJI,EAKJE,KALI,CAKE,SAAAC,KAAK,CAAI,CACdC,OAAO,CAACC,KAAR,qCAA2CX,OAA3C,EAAsDS,KAAtD,EACAR,YAAY,EAAIP,QAAQ,CAACP,cAAc,CAACyB,QAAf,CAAwB,CAAER,GAAG,CAAEJ,OAAP,CAAgBE,SAAS,CAATA,SAAhB,CAA2BW,YAAY,CAAEJ,KAAK,CAACK,OAA/C,CAAxB,CAAD,CAAxB,CACA,KAAML,CAAAA,KAAN,CACD,CATI,CAHT,wDADgB,+DAehB,CAACf,QAAD,CAAWC,WAAX,CAfgB,CAAlB,CAiBD","sourcesContent":["import { nanoid } from '@reduxjs/toolkit'\r\nimport { ChainId } from '@uniswap/sdk'\r\nimport { TokenList } from '@uniswap/token-lists'\r\nimport { useCallback } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { getNetworkLibrary, NETWORK_CHAIN_ID } from '../connectors'\r\nimport { AppDispatch } from '../state'\r\nimport { fetchTokenList } from '../state/lists/actions'\r\nimport getTokenList from '../utils/getTokenList'\r\nimport resolveENSContentHash from '../utils/resolveENSContentHash'\r\nimport { useActiveWeb3React } from './index'\r\n\r\nexport function useFetchListCallback(): (listUrl: string, sendDispatch?: boolean) => Promise<TokenList> {\r\n  const { chainId, library } = useActiveWeb3React()\r\n  const dispatch = useDispatch<AppDispatch>()\r\n\r\n  const ensResolver = useCallback(\r\n    (ensName: string) => {\r\n      if (!library || chainId !== ChainId.MAINNET) {\r\n        if (NETWORK_CHAIN_ID === ChainId.MAINNET) {\r\n          const networkLibrary = getNetworkLibrary()\r\n          if (networkLibrary) {\r\n            return resolveENSContentHash(ensName, networkLibrary)\r\n          }\r\n        }\r\n        throw new Error('Could not construct mainnet ENS resolver')\r\n      }\r\n      return resolveENSContentHash(ensName, library)\r\n    },\r\n    [chainId, library]\r\n  )\r\n\r\n  // note: prevent dispatch if using for list search or unsupported list\r\n  return useCallback(\r\n    async (listUrl: string, sendDispatch = true) => {\r\n      const requestId = nanoid()\r\n      sendDispatch && dispatch(fetchTokenList.pending({ requestId, url: listUrl }))\r\n      return getTokenList(listUrl, ensResolver)\r\n        .then(tokenList => {\r\n          sendDispatch && dispatch(fetchTokenList.fulfilled({ url: listUrl, tokenList, requestId }))\r\n          return tokenList\r\n        })\r\n        .catch(error => {\r\n          console.debug(`Failed to get list at url ${listUrl}`, error)\r\n          sendDispatch && dispatch(fetchTokenList.rejected({ url: listUrl, requestId, errorMessage: error.message }))\r\n          throw error\r\n        })\r\n    },\r\n    [dispatch, ensResolver]\r\n  )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}