{"ast":null,"code":"import{useMemo}from'react';import{isAddress}from'../../utils';export function filterTokens(tokens,search){if(search.length===0)return tokens;var searchingAddress=isAddress(search);if(searchingAddress){return tokens.filter(function(token){return token.address===searchingAddress;});}var lowerSearchParts=search.toLowerCase().split(/\\s+/).filter(function(s){return s.length>0;});if(lowerSearchParts.length===0){return tokens;}var matchesSearch=function matchesSearch(s){var sParts=s.toLowerCase().split(/\\s+/).filter(function(s){return s.length>0;});return lowerSearchParts.every(function(p){return p.length===0||sParts.some(function(sp){return sp.startsWith(p)||sp.endsWith(p);});});};return tokens.filter(function(token){var symbol=token.symbol,name=token.name;return symbol&&matchesSearch(symbol)||name&&matchesSearch(name);});}export function useSortedTokensByQuery(tokens,searchQuery){return useMemo(function(){if(!tokens){return[];}var symbolMatch=searchQuery.toLowerCase().split(/\\s+/).filter(function(s){return s.length>0;});if(symbolMatch.length>1){return tokens;}var exactMatches=[];var symbolSubtrings=[];var rest=[];// sort tokens by exact match -> subtring on symbol match -> rest\ntokens.map(function(token){var _token$symbol,_token$symbol2;if(((_token$symbol=token.symbol)===null||_token$symbol===void 0?void 0:_token$symbol.toLowerCase())===symbolMatch[0]){return exactMatches.push(token);}else if((_token$symbol2=token.symbol)===null||_token$symbol2===void 0?void 0:_token$symbol2.toLowerCase().startsWith(searchQuery.toLowerCase().trim())){return symbolSubtrings.push(token);}else{return rest.push(token);}});return[].concat(exactMatches,symbolSubtrings,rest);},[tokens,searchQuery]);}","map":{"version":3,"sources":["C:/Users/Darrius/Documents/GitHub/swap-interface/src/components/SearchModal/filtering.ts"],"names":["useMemo","isAddress","filterTokens","tokens","search","length","searchingAddress","filter","token","address","lowerSearchParts","toLowerCase","split","s","matchesSearch","sParts","every","p","some","sp","startsWith","endsWith","symbol","name","useSortedTokensByQuery","searchQuery","symbolMatch","exactMatches","symbolSubtrings","rest","map","push","trim"],"mappings":"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","sourcesContent":["import { useMemo } from 'react'\r\nimport { isAddress } from '../../utils'\r\nimport { Token } from '@uniswap/sdk'\r\n\r\nexport function filterTokens(tokens: Token[], search: string): Token[] {\r\n  if (search.length === 0) return tokens\r\n\r\n  const searchingAddress = isAddress(search)\r\n\r\n  if (searchingAddress) {\r\n    return tokens.filter(token => token.address === searchingAddress)\r\n  }\r\n\r\n  const lowerSearchParts = search\r\n    .toLowerCase()\r\n    .split(/\\s+/)\r\n    .filter(s => s.length > 0)\r\n\r\n  if (lowerSearchParts.length === 0) {\r\n    return tokens\r\n  }\r\n\r\n  const matchesSearch = (s: string): boolean => {\r\n    const sParts = s\r\n      .toLowerCase()\r\n      .split(/\\s+/)\r\n      .filter(s => s.length > 0)\r\n\r\n    return lowerSearchParts.every(p => p.length === 0 || sParts.some(sp => sp.startsWith(p) || sp.endsWith(p)))\r\n  }\r\n\r\n  return tokens.filter(token => {\r\n    const { symbol, name } = token\r\n    return (symbol && matchesSearch(symbol)) || (name && matchesSearch(name))\r\n  })\r\n}\r\n\r\nexport function useSortedTokensByQuery(tokens: Token[] | undefined, searchQuery: string): Token[] {\r\n  return useMemo(() => {\r\n    if (!tokens) {\r\n      return []\r\n    }\r\n\r\n    const symbolMatch = searchQuery\r\n      .toLowerCase()\r\n      .split(/\\s+/)\r\n      .filter(s => s.length > 0)\r\n\r\n    if (symbolMatch.length > 1) {\r\n      return tokens\r\n    }\r\n\r\n    const exactMatches: Token[] = []\r\n    const symbolSubtrings: Token[] = []\r\n    const rest: Token[] = []\r\n\r\n    // sort tokens by exact match -> subtring on symbol match -> rest\r\n    tokens.map(token => {\r\n      if (token.symbol?.toLowerCase() === symbolMatch[0]) {\r\n        return exactMatches.push(token)\r\n      } else if (token.symbol?.toLowerCase().startsWith(searchQuery.toLowerCase().trim())) {\r\n        return symbolSubtrings.push(token)\r\n      } else {\r\n        return rest.push(token)\r\n      }\r\n    })\r\n\r\n    return [...exactMatches, ...symbolSubtrings, ...rest]\r\n  }, [tokens, searchQuery])\r\n}\r\n"]},"metadata":{},"sourceType":"module"}